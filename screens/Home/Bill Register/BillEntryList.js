import React,{useState,useEffect,useRef} from 'react'
import { View,Text,StyleSheet,ActivityIndicator,TouchableOpacity} from 'react-native';
import { ScrollView, TextInput } from 'react-native-gesture-handler';
import AsyncStorage from '@react-native-community/async-storage'
import { List, Searchbar } from 'react-native-paper';
import DatePicker from 'react-native-datepicker'
import {Button} from 'react-native-paper'
import Axios from 'axios';
import moment from 'moment';
import WatsappIcon from 'react-native-vector-icons/FontAwesome';
import RBSheet from "react-native-raw-bottom-sheet";
import Icon from 'react-native-vector-icons/Feather';
import PDFReader from 'rn-pdf-reader-js'
import RNShareFile from 'react-native-share-pdf';
 
import {
  heightPercentageToDP as hp,
  widthPercentageToDP as wp,
} from '../../responsiveLayout/ResponsiveLayout'



function BillEntryList({navigation,route}) {


  const[loading,setLoading]=useState(true)
  const[tableData,setTableData]=useState()
  const[data,setData]=useState()
  const[length,setLength]=useState()
  const[partyName,setPartyName]=useState()
  const[division,setDivision]=useState()
  const[startDate,setStartDate]=useState()
  const[endDate,setEndDate]=useState()
  const[filteredData,setFilteredData]=useState()
  const[routeName,setRouteName]=useState()
  const[searchName,setSearchName]=useState()

  function getBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = error => reject(error);
    });
  }


  const handleWhatsapp=()=>{
    console.log("sharing")
    loadAndSharePDF()


  }


  async function loadAndSharePDF() {
    console.log("sheared")
    const showError = await RNShareFile.sharePDF("","Report");
    if (showError) {
      console.log(showError)
      // Do something with the error
    }
  }
  useEffect(()=>{
    console.log("hey")
    const unsubscribe =navigation.addListener('focus', async() => {
      console.log(await AsyncStorage.getItem("startingDate"))
      let todayDate=moment(new Date()).format("DD/MM/YYYY")
      let date= moment(await AsyncStorage.getItem("startingDate")).format("DD/MM/YYYY")
      
       setStartDate(date)
       setEndDate(todayDate)
       setRouteName(route.name)
       getDealerList(date,todayDate)
      })
      return unsubscribe;
    },[navigation])


    var RBref=useRef()

    

  const getDealerList=async(start,end)=>{
    console.log(start,end)
    const masterid = await AsyncStorage.getItem("masterid")
    const compid = await AsyncStorage.getItem("companyCode")
    const divid = await AsyncStorage.getItem("divisionCode")
 
    Axios({
      method: 'POST',
      url: `http://www.softsauda.com/bill_ragister/apibillregdetail`,
      data: {
        "cocode":compid,
        "divid":divid,
         "start_date":start,
        "end_date":end
    }
  })
      .then(response=>{
          console.log(response.data.data.length)
          setLength(response.data.data.length)
          setData(response.data.data)
          setTableData(response.data.data)
          setFilteredData(response.data.data)
          setLoading(false)
        })
  
  }
  

  const filter=(text,type)=>{
    if(type=="party")
    {
    const array=[...tableData]
    const newArray=array.filter(table =>((table.pcd.party_name).toLowerCase()).includes(text.toLowerCase()))
    setFilteredData(newArray)
    }
    else{
    const array=[...tableData]
    const newArray=array.filter(table =>((table.bill_divcode.div_mast).toLowerCase()).includes(text.toLowerCase()))
    setFilteredData(newArray)
    }
   
   }

 
    return (
      


      <ScrollView >

{
  !loading?
  <>
        
        <View style={{display:"flex",flexDirection:"row",justifyContent:"space-around"}}>
          


        <Searchbar
      placeholder="Search"
      defaultValue={searchName}
          onChangeText={text=>filter(text)}
          style={{borderWidth:0.5,width:wp("90%"),height:hp("4.5%"), flex:0.97,marginLeft:10,
          marginTop:10,padding:5,borderRadius:10}}
    />
          <TouchableOpacity style={{height:hp("6%"),flex:0.1,
          marginLeft:10,backgroundColor:"#D9D9D9",
          borderRadius:10,marginTop:5,
          paddingLeft:10,paddingRight:10,marginRight:8}}
          onPress={() => RBref.open()}>
         <Icon name="filter" size={wp("7%")} color="black" 
         style={{top:5}} />
        </TouchableOpacity>
    

        </View>
        <View style={{ borderBottomColor: 'grey',borderBottomWidth: 0.5,marginBottom:0,padding:0,margin:10}}/>
   
        <View>
        {
          filteredData?.map(dat=>(
            <>
        <List.Section >
        <List.Accordion 
        title={`Party Name: ${dat.pcd.party_name},${dat.pcd.city_name.city_name}`}
        description={`Division: ${dat.bill_divcode.div_mast} `}
        description1={`Bill Amount: ${dat.amount} `}
        handleLeft={handleWhatsapp}
        left={props =>
        <View style={{display:"flex",flexDirection:"column",padding:10,borderRightWidth:0.6}}>
          <WatsappIcon reverse name="whatsapp" size={wp("7%")} color="black"
  style={{marginLeft:10}}  />

        <Text style={{fontSize:10}}>{((dat.d_a_t_e).substring(0,10)).split('-').reverse().join('/')}</Text>
        </View>
        }>
{/*
<>
{ dat.cs_group.map((prod,i)=>(
  <>
   <View style={{ borderBottomColor: 'grey',borderBottomWidth: 1,marginBottom:0,padding:0,margin:0 }}/>
     
     <View style={{backgroundColor:"#CBD9F5"}}>
            <List.Item title={`Product:${prod.pcode}`} style={{marginTop:5}} />
           <List.Item title={`Brand:${prod.brandcode}`} />
           <List.Item title={`Packing:${prod.pcks}`} />
           <List.Item title={`Quantity:${prod.qty}`} />
           <List.Item title={`Weight:${prod.wghts}`}  style={{marginBottom:5}}/>
           </View>

        </>
           
           ))}

           </>
           */ }

      </List.Accordion>
      </List.Section>
        <View style={{ borderBottomColor: 'grey',borderBottomWidth: 0.5,marginBottom:0,padding:0,margin:0}}/>
         </>
        ))}
           <RBSheet
          ref={ref => {
            RBref = ref;
          }}
          openDuration={250}
          customStyles={{
            container: {
              borderTopEndRadius:20,
              borderTopStartRadius:20,
              backgroundColor:theme1.LIGHT_BLUE_COLOR
            }
          }}
        >
             <View style={{alignItems:"center",justifyContent:"center"}}>
          <Text style={{fontSize:wp("5%"),fontWeight:"bold"}}>FILTER  </Text>
          </View>

<View style={{display:"flex",flexDirection:"row",paddingLeft:10}}>
<Text style={{width:wp("10%"),flex:0.25,marginTop:17}}>Start Date:</Text>
      <DatePicker

style={{ width: wp('80%'), borderRadius: 5, margin: 10 ,flex:0.75}}
date={startDate}
mode="date"
placeholder="Date"
format="DD/MM/YYYY"

confirmBtnText="Confirm"
cancelBtnText="Cancel"
customStyles={{
    dateIcon: {
        position: 'absolute',
        left: 10,
        top: 9,
        marginLeft: 0,
        height:hp("2.8%"),
        width:wp("3.5%")

    },
    dateInput: {
        borderRadius: 10,
        marginRight: 15,
        height: hp("4%")

    }
    // ... You can check the source to find the other keys.
}}
onDateChange={(date) => {
    setStartDate(date)
}}
/>
</View>


<View style={{display:"flex",flexDirection:"row",paddingLeft:10,margin:0,top:-hp("3%")}}>
<Text style={{width:wp("10%"),flex:0.25,marginTop:17}}>End Date:</Text>
      <DatePicker

style={{ width: wp('80%'), borderRadius: 5, margin: 10 ,flex:0.75}}
date={endDate}
mode="date"
placeholder="Date"
format="DD/MM/YYYY"

confirmBtnText="Confirm"
cancelBtnText="Cancel"
customStyles={{
    dateIcon: {
       
      position: 'absolute',
      left: 10,
      top: 9,
      marginLeft: 0,
      height:hp("2.8%"),
      width:wp("3.5%")
    },
    dateInput: {
      borderRadius: 10,
      marginRight: 15,
      height: hp("4%")
               }
    // ... You can check the source to find the other keys.
}}
onDateChange={(date) => {
    setEndDate(date)
}}
/>
</View>
<View style={{display:"flex",flexDirection:"row",paddingLeft:10,margin:0,top:-hp("4.7%")}}>
<Text style={{width:wp("10%"),flex:0.25,marginTop:10}}>Buyer:</Text>
    <TextInput placeholder="Buyer" style={{borderWidth:1,width:wp("70%"),height:hp("4%"), flex:0.68,marginLeft:10,
     marginTop:10,padding:5,borderRadius:10}} defaultValue={searchName}
      onChangeText={text=>filter(text)}
          />
    </View>
    <View style={{display:"flex",flexDirection:"row",paddingLeft:10,margin:0,top:-hp("4.7%")}}>
     <Text style={{width:wp("10%"),flex:0.25,marginTop:10}}>Seller:</Text>
    <TextInput placeholder="Buyer" style={{borderWidth:1,width:wp("70%"),height:hp("4%"), flex:0.68,marginLeft:10,
     marginTop:10,padding:5,borderRadius:10}} defaultValue={searchName}
      onChangeText={text=>filter(text)}
          />
    </View>

    <View style={[styles.column, { justifyContent: "center" }]}>

<TouchableOpacity 
                                style={styles.button1}
                              >
                                    
                                <Text style={{color:"white"}}>Show</Text>
                            </TouchableOpacity>
                      </View>

          </RBSheet>
       
      
          </View>

        </>:    <ActivityIndicator size="large" color="skyblue" size={100} />
     
  }
</ScrollView>
      
    )
}

export default BillEntryList
const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, paddingTop: 30, backgroundColor: '#fff' },
  singleHead: { width: 80, height: 40, backgroundColor: '#c8e1ff' },
  title: { backgroundColor: '#f6f8fa' },
  titleText: { textAlign:'center' },
  text: { textAlign: 'center' },
  btn: { width: 58, height: 18, marginHorizontal: 7, backgroundColor: '#c8e1ff', borderRadius: 2, justifyContent: "center" },
  btnText: { textAlign: 'center' },
  pdf: {
    flex:1,
    width:wp("100%"),
    height:hp("100%"),
},
  cnt: {
    flex: 1,
    padding: 32,
    paddingTop: 80,
    justifyContent: 'flex-start',
  },
  column: {
    display: "flex",
    flexDirection: "row",
    
},
  button1: {
    alignItems: "center",
    justifyContent: "center",
    width: wp("95%"),
    backgroundColor: theme1.DARK_BLUE_COLOR,
    padding: 10,
    top:-hp("3%"),
    paddingHorizontal: 25,
    borderRadius: 10,
    marginBottom:20,
    marginLeft:10
   
},
});